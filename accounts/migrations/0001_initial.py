# Generated by Django 2.1.7 on 2019-03-26 19:19

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=50, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('salt_password', models.CharField(blank=True, max_length=255, null=True, verbose_name='Password with salt password')),
                ('old_password', models.CharField(blank=True, max_length=128, null=True, verbose_name='Password with old hash')),
                ('cellphone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Cellphone')),
                ('sex', models.CharField(choices=[('H', 'Hombre'), ('M', 'Mujer')], db_index=True, max_length=1, null=True, verbose_name='Sex')),
                ('country_iso', models.CharField(blank=True, max_length=3, null=True, verbose_name='Pa√≠s ISO?')),
                ('picture', models.CharField(blank=True, max_length=300, null=True, verbose_name='Picture')),
                ('email_valid', models.BooleanField(default=False, verbose_name='Email valid')),
                ('user_banned', models.BooleanField(default=False, verbose_name='is banned?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'abstract': False,
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biografy', models.TextField(blank=True, max_length=300, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('social_network_id', models.AutoField(primary_key=True, serialize=False)),
                ('social_network', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='TypeAddress',
            fields=[
                ('type_address_id', models.AutoField(primary_key=True, serialize=False)),
                ('type_address', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='UserSocialNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('social_id', models.CharField(max_length=200, null=True, unique=True)),
                ('profile_image', models.CharField(blank=True, max_length=300)),
                ('first_name', models.CharField(blank=True, max_length=130, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.EmailField(blank=True, max_length=150, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('social_network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_networks', to='accounts.SocialNetwork')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTypeAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('number', models.IntegerField()),
                ('reference', models.CharField(blank=True, max_length=150, null=True)),
                ('latitud', models.CharField(blank=True, max_length=150, null=True)),
                ('longitud', models.CharField(blank=True, max_length=150, null=True)),
                ('type_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_documents', to='accounts.TypeAddress')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
